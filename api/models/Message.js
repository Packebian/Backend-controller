"use strict";

var Promise = require("bluebird");
/**
 * Message.js
 *
 * @description :: reprensentation of a message. Messages can be linked to a ticket or a package
 * @docs        :: http://sailsjs.org/documentation/concepts/models-and-orm/models
 */

module.exports = {
  tableName: "Messages",
  autoPK: false,
  attributes: {
    id: {
      type: "integer",
      primaryKey: true
    },
    user: {
      model: "User",
      type: "integer",
      required: true
    },
    content: {
      type: "string",
      required: true
    },
    package: {
      model: "Package",
      type: "integer"
    },
    ticket: {
      model: "Ticket",
      type: "integer"
    },
    toJSON: function() {
      var obj = this.toObject();
      // Remove too verbose content of Vote
      if(obj.ticket !== undefined && obj.ticket.id !== undefined) { obj.ticket = obj.ticket.id; }
      if(obj.package !== undefined && obj.package.id !== undefined) { obj.package = obj.package.id; }
      return obj;
    }
  },
  /* Check complex conditions before persisting the Object in the database */
  beforeCreate: function(values, cb) {
    // Retrieve adapter
    var connectionName = sails.config.models.connection;
    var adapter = sails.config.connections[connectionName].adapter;

    // remove id from values unless the adapter is sails-disk
    if(adapter !== "sails-disk") { delete values.id; }

    // If the adapter is not sails-mongo, the id should be generated by database
    if(adapter !== "sails-mongo") { return cb(); }

    Sequence.next(Message.tableName, function(err, num) {
      if (err) { return cb(err); }
      values.id = num;
      return cb();
    });
  },
  /* Check complex conditions before persisting the Object in the database */
  beforeValidate: function(values, next) {
    var promises = [];

    // TODO: Fix this test
    // promises.push(new Promise(function (resolve, reject) {
    //   if(values.ticket === undefined && values.package === undefined) {
    //     return reject("message: either package or ticket should be set");
    //   } else if(values.ticket !== undefined && values.package !== undefined) {
    //     return reject("message: package and ticket can't be both set");
    //   }
    //   resolve();
    // }));

    /* If value package is set, it should point to an existing package */
    if(values.package !== undefined) {
      promises.push(new Promise(function (resolve, reject) {
        Package
          .findOne(values.package)
          .then(function (record) {
            if(record === undefined) {
              return reject("message: value package should match an existing package");
            }
            return resolve();
          })
          .catch(function (err) { return reject(err); });
      }));
    }

    /* If value ticket is set, it should point to an existing ticket */
    if(values.ticket !== undefined) {
      promises.push(new Promise(function (resolve, reject) {
        Ticket
          .findOne({id: values.ticket})
          .then(function (record) {
            if(record === undefined) {
              return reject("message: value ticket should match an existing ticket");
            }
            return resolve();
          })
          .catch(function (err) { return reject(err); });
      }));
    }

    /* Wait for all promises call next if no error */
    Promise.all(promises)
      .spread(function(){
        return next();
      })
      .catch(function(err){
        /* At least one promise threw an error */
        sails.log.info(err);
        return next(err);
      });
  }
};
